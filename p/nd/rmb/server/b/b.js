!function(e){var t={};function s(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,s),o.l=!0,o.exports}s.m=e,s.c=t,s.d=function(e,t,n){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)s.d(n,o,function(t){return e[t]}.bind(null,o));return n},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=9)}([function(e,t,s){const n={name:"3AT1",port:27017,mysqlPort:33060,mysqlHost:"0.0.0.0",mysqlUser:"root",mysqlPass:"password",mysqlPooling:!0,mysqlMaxPoolSize:10,host:"127.0.0.1",system:"mysql",user:"u2",pwd:"pwd2"},o="modules/",r="infra/services/",i="client/modules/",a="client/services/",c="infra/data/db/fs/",u="infra/data/db/csv/",l="client/src/lib/",d="node_modules",h="/dist/client/prod/";e.exports={common:{clientPresentation:l,rootNmPath:d,rootPath:"",serverInfraModulesPath:o,serverInfraServicesPath:r,serverClientModulesPath:i,serverClientServicesPath:a,staticAssetsPath:h,viewEngine:"ejs",viewPath:h},modules:{index:{routePath:i+"index/route"},test:{routePath:o+"test/route"},user:{routePath:i+"user/route",ngAppPath:l+"login/index.js"},protectedRoute:{routePath:i+"protectedRoute/route"},crudFile:{routePath:o+"crud/fs/route"},crudDb:{userSession:!1,name:n.name,user:n.user,pwd:n.pwd,currentDbSystem:n.system,host:n.host,port:n.port,mdb:{url:"mongodb://"+n.domain+":"+n.port,urlDb:"mongodb://"+n.domain+":"+n.port+"/"+n.name,dataPath:"C:/f/tools/mongo/data/",logsPath:"C:/f/tools/mongo/logs.log",routePathT1:o+"crud/mDb/t1/route",routePathT2:o+"crud/mDb/t2/route",routePath:o+"crud/mDb/route"},ms:{routePathT1:o+"crud/msDb/t1/route",routePathT2:o+"crud/msDb/t2/route"}},errorPages:{routePath:o+"errorPages/route"},childProcess:{routePath:o+"childProcess/route"}},db:{config:{ms:{host:n.mysqlHost,port:n.mysqlPort,user:n.mysqlUser,pass:n.mysqlPass,dbName:n.name,pooling:n.mysqlPooling,poolMaxSize:n.mysqlMaxPoolSize}},session:{fsPath:c+"session.json"},users:{fsPath:c+"users.json",csvPath:u+"users.csv",csvInfoPath:u+"userInfo.csv",csvRelationPath:u+"userRelation.csv"},posts:{fsPath:c+"posts.json",csvPath:u+"posts.csv",collectionName:"posts"},auth:{fsPath:c+"auth.json"},test:{resetDataThresHold:1,fsPath1:c+"sample-big-data.json",fsPath2:c+"sample-mid-data.json"}},tools:{express:s(1),browserSync:s(11),bodyParser:s(12),cookieParser:s(13),csvParse:s(14),debug:s(15),duplex:s(3).Duplex,fastCsv:s(16),fs:s(17),mongoDb:s(5),mongoClient:s(5).MongoClient,promisify:s(18).promisify,readableStream:s(3).Readable,through2:s(19),url:s(20),writeableStream:s(3).Writable},errorHandler:{default:(e,t,s,n)=>{t.status(e.status||500),t.render("error",{message:e.message,error:{}})},dev:(e,t,s,n)=>{t.status(e.status||500),t.render("error",{message:e.message,error:{}})},404:(e,t,s)=>{let n=new Error("404");n.status=404,s(n)}}}},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("child_process")},function(e,t){e.exports=require("stream")},function(e,t,s){const n=s(0),o=s(6),r=s(7),i=(s(8),s(27));let a=function(){return class{connect(e=null){switch(e){case"mysql":return r.connect(n.modules.crudDb.currentDbSystem);case"mongo":return o.connect(n.modules.crudDb.currentDbSystem);default:return o.connectMongo(n.modules.crudDb.currentDbSystem)}}static closeDbConnection(){(new i).close()}static prepareServerStart(){(new i).init()}}}();e.exports=a},function(e,t){e.exports=require("mongodb")},function(e,t,s){const n=s(0);var o=null,r=null;let i=function(){return class{static closeDbConnection(){r&&(r.close(),o=null,r=null)}static getDbObject(){return o||null}static setDbObject(e){return o?null:o=e}static getDbConnect(){return r||null}static setDbConnect(e){r=e}static connectMongo(){var e=n.tools.mongoDb.MongoClient,t="mongodb://";t+=n.modules.crudDb.user,t+=":",t+=n.modules.crudDb.pwd,t+="@",t+=n.modules.crudDb.host,t+=":",t+=n.modules.crudDb.port,t+="/",t+=n.modules.crudDb.name;try{return e.connect(t,{useNewUrlParser:!0})}catch(e){console.log("Db connection error")}}}}();e.exports=i},function(e,t,s){const n=s(0);var o=s(25);let r=function(){var e=null;return class{static closeDbConnection(){e&&(e.close(),null,e=null)}static getDbObject(e){return new o(null).getDbObject(e)}static setDbObject(e){e}static getDbConnect(e=null){return new o(null).getDbConnect()}static setDbConnect(e,t){dbConnec=e}static async connect(){var e,t;e={host:n.db.config.ms.host,port:n.db.config.ms.port,user:n.db.config.ms.user,password:n.db.config.ms.pass},t={pooling:{enabled:n.db.config.ms.pooling,maxSize:n.db.config.ms.poolMaxSize}},new o(e,t)}}}();e.exports=r},function(e,t,s){s(0);let n=function(){return class{static e(e){console.log(e)}}}();e.exports=n},function(e,t,s){e.exports=s(10)},function(e,t,s){const n=s(0),o=s(21);let r=n.tools.express();o.setExpressAppLocals(r),o.setExpressAppGlobals(r),o.initSession(r),o.serveStatic(r),o.addRoutes(r),o.addNodeEvents(r),r.use(function(e,t,s){s()}),o.customEvents(r),r.listen(r.get("port"),()=>{n.tools.browserSync({open:!1,port:r.get("port")+1,proxy:"localhost:"+r.get("port"),ui:!1}),r.emit("serverLive","anyArgs")}),e.exports=r},function(e,t){e.exports=require("browser-sync")},function(e,t){e.exports=require("body-parser")},function(e,t){e.exports=require("cookie-parser")},function(e,t){e.exports=require("csv-parse")},function(e,t){e.exports=require("debug")},function(e,t){e.exports=require("fast-csv")},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("util")},function(e,t){e.exports=require("through2")},function(e,t){e.exports=require("url")},function(e,t,s){var n=s(1);const o=s(22),r=s(28),i=s(44),a=s(45),c=s(4),u=s(46);let l=function(){return class{static serveStatic(e){e.use(n.static("C:/d/rmb/3A-T1/dist/client/prod/"))}static customEvents(e){e.on("serverLive",e=>{c.prepareServerStart()})}static addNodeEvents(e){o.init(e)}static initSession(e){u.init(e)}static addRoutes(e){r.init(e)}static setExpressAppLocals(e){a.init(e)}static setExpressAppGlobals(e){i.init(e)}}}();e.exports=l},function(e,t,s){const n=s(23);s(24);let o=function(){return class{static registerProcessEvents(){process.on("uncaughtException",e=>{console.log("Error catch at node-events-core"),console.error("whoops! There was an uncaught error",e)}),process.on("unhandledRejection",function(e,t){console.error("Error catch at node-events-core"),console.error("Unhandled rejection",{reason:e,promise:t})})}static registerErrorEvents(){}static registerDbEvents(){}static registerClusterEvents(){}static registerAppEvents(e){new n(e)}static init(e){this.registerProcessEvents(),this.registerAppEvents(e),this.registerErrorEvents(),this.registerDbEvents(),this.registerClusterEvents()}}}();e.exports=o},function(e,t){let s=function(){return class{checkExpectation(e,t){}clientError(e,t){}close(e,t){}connect(e,t,s){}connection(e){}request(e,t){}upgrade(e,t,s){}init(e){e.on("checkExpectation",this.checkExpectation),e.on("clientError",this.clientError),e.on("close",this.close),e.on("connect",this.connect),e.on("connection",this.connection),e.on("request",this.request),e.on("upgrade",this.upgrade)}constructor(e){this.init(e)}}}();e.exports=s},function(e,t,s){const n=s(4);let o=function(){return class{static closeDb(){n.closeDbConnection()}}}();e.exports=o},function(e,t,s){const n=s(0),o=s(26);let r=function(){if(void 0===e)var e=null,t=null;else console.log("DbConnectionCoreHelperInstance already exists");return class{close(){t&&(t.close(),t=null)}getDbObject(e){t&&t.getSession().then(t=>{e(t.getSchema(n.db.config.ms.dbName))})}getDbConnect(e){t&&t.getSession().then(t=>{e(t)})}getClient(){return t}setClient(e){t=Object.create(e)}init(e,t,s){this.setClient(o.getClient(e,t))}constructor(t=null,s=null,n=null){return e||(this.init(t,s,n),e=this),e}}}();e.exports=r},function(e,t){e.exports=require("@mysql/xdevapi")},function(e,t,s){const n=s(0),o=s(6),r=s(7);s(8);let i=function(){if(void 0===e)var e=null;else console.log("DbServerCoreHelperInstance already exists");return class{close(){"mysql"===n.modules.crudDb.currentDbSystem?r.closeDbConnection():"mongo"===n.modules.crudDb.currentDbSystem&&o.closeDbConnection()}getDb(e=null){if("mysql"===n.modules.crudDb.currentDbSystem)return r.getDbObject(e);"mongo"===n.modules.crudDb.currentDbSystem&&o.getDbObject()}init(e=null){"mysql"===n.modules.crudDb.currentDbSystem?r.connect():"mongo"===n.modules.crudDb.currentDbSystem&&o.connect().then(function(e){o.setDbConnect(e),o.setDbObject(e.db(n.modules.crudDb.name))},function(e){console.error(e)})}constructor(){return e||(e=this),e}}}();e.exports=i},function(e,t,s){let n=function(){return class{static init(e){e.use(["/","/index"],s(29)),e.use("/cp",s(30)),e.use("/t",s(37)),e.use("/db/ms/t1",s(38)),e.use("/user",s(42)),e.use("/error",s(43))}}}();e.exports=n},function(e,t,s){let n=s(0).tools.express.Router();n.get(["/","/index"],(e,t)=>{t.render("index",{id:"index",title:"Index Page",text:"<b>Bold Text</b>",user:t.app.locals.userData})}),e.exports=n},function(e,t,s){var n=s(1).Router(),o=s(31);n.get("/spawn",async function(e,t){o.spawn(t)}),n.get("/exec",(e,t)=>{o.exec(t)}),n.get("/execFile",(e,t)=>{o.execFile(t)}),n.get("/fork",(e,t)=>{o.execFile(t)}),e.exports=n},function(e,t,s){const{spawn:n,execFile:o}=s(2);var r=function(){s(0);var e=s(32);return class{static spawn(t){var s=new e("spawn","pwd");s.on("data",function(e,s){console.log(e,s),t.send(e.toString())}),s.on("exit",function(e,s){console.log(e,s),t.send(e.toString()),t.end()}),s.on("disconnect",function(e,s){console.log(e,s),t.send(e.toString())}),s.on("error",function(e,s){console.log(e,s),t.send(e.toString())}),s.on("message",function(e,s){console.log(e,s),t.send(e.toString())})}static exec(e){e.send("exec")}static execFile(e){o("node",["--version"],(t,s,n)=>{if(t)throw e.send("stderr "+n.toString()),t;e.send("stdout "+s.toString())})}}}();e.exports=r},function(e,t,s){var n=s(33);let o=function(){return class{init(e,t){switch(e){case"fork":n.fork(t);break;case"execFile":n.execFile(t);break;case"spawn":n.spawn(t);break;case"exec":n.exec(t);break;default:return!1}}constructor(e,t){init(e,t)}}}();e.exports=o},function(e,t,s){s(34),s(35);var n=s(36);let o=function(){return class{static exec(){}static execFile(){}static fork(){}static spawn(e){return new n(e)}}}();e.exports=o},function(e,t,s){const{fork:n}=s(2);let o=function(){return class extends n{constructor(e){super(e)}}}();e.exports=o},function(e,t,s){const{exec:n}=s(2);let o=function(){return class extends n{constructor(e){super(e)}}}();e.exports=o},function(e,t,s){const{spawn:n}=s(2);let o=function(){return class extends n{constructor(e){super(e)}}}();e.exports=o},function(e,t,s){let n=s(1).Router();n.get("/4",async function(e,t){t.send("<h1> /t/4 </h1>")}),n.get("/3",async function(e,t){t.send("<h1> /t/3 </h1>")}),n.get("/2",async function(e,t){setTimeout(function(){t.send("<h1> /t/2 </h1>")},5e3)}),n.get("/1",async function(e,t){t.send("<h1> /t/1 </h1>")}),n.get("/0",(e,t)=>{t.send("<h1> /t/0 </h1>")}),e.exports=n},function(e,t,s){const n=s(0).tools.express.Router(),o=s(39);n.get(["/c/:collecName"],(e,t)=>{o.checkCollec(t,e.params.collecName)}),n.get(["/cd/:collecName"],(e,t)=>{o.countFoundDocuments(t,{},e.params.collecName,e=>{t.send(e.toString())})}),n.get(["/f/:collecName"],(e,t)=>{o.find(t,{},e.params.collecName,e=>{t.json(e)})}),n.get(["/lc"],(e,t)=>{o.listCollec(t,(e,s,n)=>{e.forEach(function(e){t.send(e.name)})})}),e.exports=n},function(e,t,s){s(0);const n=s(40);let o=function(){return class{static checkCollec(e,t,s=null,o=null){var r=null,i=null;try{r=(i=(new n).getDb()).collection(t),s?s(r,i):e.send("success check collection")}catch(t){console.log(t.message),e.send("error check collection")}}static countFoundDocuments(e,t,s,n=null,o=null){this.checkCollec(e,s,(s,o)=>{try{s.countDocuments(t).then(function(t){n?n(t,s,o):e.send("success find in collection")})}catch(t){console.log(t.message),e.send("error find in collection")}})}static find(e,t,s,n=null,o=null){this.checkCollec(e,s,(s,o)=>{try{s.find(t).toArray(function(t,r){n?n(r,s,o):e.send("success find in collection")})}catch(t){console.log(t.message),e.send("error find in collection")}})}static listCollec(e,t=null,s=null){try{var o=(new n).getDb();o.listCollections().toArray().then(function(s){t?t(s,o):e.send("success listCollec")})}catch(t){console.log(t.message),e.send("error listCollec")}}}}();e.exports=o},function(e,t,s){s(0);const n=s(41);let o=function(){return class{constructor(){return this}getDb(){return n.getDb()}}}();e.exports=o},function(e,t,s){const n=s(4);let o=function(){let e=async function(){var e=new n;return new Promise(function(t,s){t(e.getDb())})};return class{static init(){return e()}static getDb(){return(new n).getDb()}}}();e.exports=o},function(e,t,s){let n=s(0).tools.express.Router();n.get(["","/"],(e,t)=>{t.render("login/login",{id:"login",title:"Login Page",text:"<b>Bold Text</b>"})}),e.exports=n},function(e,t,s){let n=s(1).Router(),o=s(0);n.get("/*",(e,t,s)=>{var n=o.tools.url.format({protocol:e.protocol,host:e.get("host"),pathname:e.originalUrl});console.log(new Date+"Client got hit to error page => "+n),s()}),n.get("/200",(e,t)=>{t.status(200),t.send("<h1>200</h1><br /><p>Standard response for successful HTTP requests. The actual response will depend on the request method used. In a GET request, the response will contain an entity corresponding to the requested resource. In a POST request, the response will contain an entity describing or containing the result of the action.</p>")}),n.get("/201",(e,t)=>{t.status(201),t.send("<h1> 201 </h1><p>The request has been fulfilled, resulting in the creation of a new resource.</p>")}),n.get("/202",(e,t)=>{t.status(202),t.send("<h1> 202 </h1><p>The request has been accepted for processing, but the processing has not been completed. The request might or might not be eventually acted upon, and may be disallowed when processing occurs.</p>")}),n.get("/204",(e,t)=>{t.status(204),t.send("<h1> 204 </h1><p>The server successfully processed the request and is not returning any content.</p>")}),n.get("/205",(e,t)=>{t.status(205),t.send("<h1> 205 </h1><p> The server successfully processed the request, but is not returning any content. Unlike a 204 response, this response requires that the requester reset the document view. </p>")}),n.get("/206",(e,t)=>{t.status(206),t.send("<h1> 206 </h1><p> The server is delivering only part of the resource (byte serving) due to a range header sent by the client. The range header is used by HTTP clients to enable resuming of interrupted downloads, or split a download into multiple simultaneous streams. </p>")}),n.get("/208",(e,t)=>{t.status(208),t.send("<h1> 208 </h1><p> The members of a DAV binding have already been enumerated in a preceding part of the (multistatus) response, and are not being included again. </p>")}),n.get("/301",(e,t)=>{t.status(301),t.send("<h1> 301 </h1><p> This and all future requests should be directed to the given URI. </p>")}),n.get("/303",(e,t)=>{t.status(303),t.send("<h1> 303 </h1><p> The response to the request can be found under another URI using the GET method. When received in response to a POST (or PUT/DELETE), the client should presume that the server has received the data and should issue a new GET request to the given URI. </p>")}),n.get("/304",(e,t)=>{t.status(304),t.send("<h1> 304 </h1><p> Indicates that the resource has not been modified since the version specified by the request headers If-Modified-Since or If-None-Match. In such case, there is no need to retransmit the resource since the client still has a previously-downloaded copy </p>")}),n.get("/305",(e,t)=>{t.status(305),t.send("<h1> 305 </h1><p> The requested resource is available only through a proxy, the address for which is provided in the response. Many HTTP clients (such as Mozilla[27] and Internet Explorer) do not correctly handle responses with this status code, primarily for security reasons. </p>")}),n.get("/307",(e,t)=>{t.status(307),t.send("<h1> 307 </h1><p> In this case, the request should be repeated with another URI; however, future requests should still use the original URI. In contrast to how 302 was historically implemented, the request method is not allowed to be changed when reissuing the original request. For example, a POST request should be repeated using another POST request. </p>")}),n.get("/400",(e,t)=>{t.status(400),t.send("<h1> 400 </h1><p> The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, size too large, invalid request message framing, or deceptive request routing) </p>")}),n.get("/401",(e,t)=>{t.status(401),t.send("<h1> 401 </h1><p> Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the requested resource. </p>")}),n.get("/402",(e,t)=>{t.status(402),t.send("<h1> 402 </h1><p> The original intention was that this code might be used as part of some form of digital cash or micropayment scheme, as proposed for example by GNU Taler[36], but that has not yet happened, and this code is not usually used. Google Developers API uses this status if a particular developer has exceeded the daily limit on requests.[37] Sipgate uses this code if an account does not have sufficient funds to start a call.[38] Shopify uses this code when the store has not paid their fees and is temporarily disabled. </p>")}),n.get("/403",(e,t)=>{t.status(403),t.send("<h1> 403 </h1><p> The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort. </p>")}),n.get("/404",(e,t)=>{t.status(404),t.send("<h1> 404 </h1><p> The requested resource could not be found but may be available in the future. Subsequent requests by the client are permissible. </p>")}),n.get("/405",(e,t)=>{t.status(405),t.send("<h1> 405 </h1><p> A request method is not supported for the requested resource; for example, a GET request on a form that requires data to be presented via POST, or a PUT request on a read-only resource. </p>")}),n.get("/406",(e,t)=>{t.status(406),t.send("\n    <h1> 406 </h1>\n    <p> The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request. </p>\n    <p>Content negotiation refers to mechanisms defined as a part of HTTP that make it possible to serve different versions of a document (or more generally, representations of a resource) at the same URI, so that user agents can specify which version fits their capabilities the best. One classical use of this mechanism is to serve an image in GIF or PNG format, so that a browser that cannot display PNG images (e.g. MS Internet Explorer 4) will be served the GIF version.</p>\n    <p>A resource may be available in several different representations; for example, it might be available in different languages or different media types.</p><p> One way of selecting the most appropriate choice is to give the user an index page and let them select the most appropriate choice; however it is often possible to automate the choice based on some selection criteria.</p>\n    ")}),n.get("/407",(e,t)=>{t.status(407),t.send("<h1>  </h1><p> The client must first authenticate itself with the proxy. </p>")}),n.get("/408",(e,t)=>{t.status(408),t.send('<h1> 408 </h1><p> The server timed out waiting for the request. According to HTTP specifications: "The client did not produce a request within the time that the server was prepared to wait. The client MAY repeat the request without modifications at any later time." </p>')}),n.get("/409",(e,t)=>{t.status(409),t.send("<h1> 409 </h1><p> Indicates that the request could not be processed because of conflict in the current state of the resource, such as an edit conflict between multiple simultaneous updates. </p>")}),n.get("/410",(e,t)=>{t.status(410),t.send('<h1> 410 </h1><p> Indicates that the resource requested is no longer available and will not be available again. This should be used when a resource has been intentionally removed and the resource should be purged. Upon receiving a 410 status code, the client should not request the resource in the future. Clients such as search engines should remove the resource from their indices.[43] Most use cases do not require clients and search engines to purge the resource, and a "404 Not Found" may be used instead. </p>')}),n.get("/411",(e,t)=>{t.status(411),t.send("<h1> 411 </h1><p> The request did not specify the length of its content, which is required by the requested resource </p>")}),n.get("/412",(e,t)=>{t.status(412),t.send("<h1> 412 </h1><p> The server does not meet one of the preconditions that the requester put on the request </p>")}),n.get("/413",(e,t)=>{t.status(413),t.send('<h1> 413 </h1><p> The request is larger than the server is willing or able to process. Previously called "Request Entity Too Large". </p>')}),n.get("/414",(e,t)=>{t.status(414),t.send('<h1> 414 </h1><p> The URI provided was too long for the server to process. Often the result of too much data being encoded as a query-string of a GET request, in which case it should be converted to a POST request.[47] Called "Request-URI Too Long" previously </p>')}),n.get("/415",(e,t)=>{t.status(415),t.send("<h1> 415 </h1><p> The request entity has a media type which the server or resource does not support. For example, the client uploads an image as image/svg+xml, but the server requires that images use a different format. </p>")}),n.get("/416",(e,t)=>{t.status(416),t.send('<h1> 416 </h1><p> The client has asked for a portion of the file (byte serving), but the server cannot supply that portion. For example, if the client asked for a part of the file that lies beyond the end of the file.[49] Called "Requested Range Not Satisfiable" previously. </p>')}),n.get("/417",(e,t)=>{t.status(417),t.send("<h1> 417 </h1><p> The server cannot meet the requirements of the Expect request-header field. </p>")}),n.get("/418",(e,t)=>{t.status(418),t.send("<h1> 418 </h1><p> This code was defined in 1998 as one of the traditional IETF April Fools jokes, in RFC 2324, Hyper Text Coffee Pot Control Protocol, and is not expected to be implemented by actual HTTP servers. The RFC specifies this code should be returned by teapots requested to brew coffee. This HTTP status is used as an Easter egg in some websites, including Google.com. </p>")}),n.get("/421",(e,t)=>{t.status(421),t.send("<h1> 421 </h1><p> The request was directed at a server that is not able to produce a response[55] (for example because of connection reuse). </p>")}),n.get("/423",(e,t)=>{t.status(423),t.send("<h1> 423 </h1><p> The resource that is being accessed is locked </p>")}),n.get("/424",(e,t)=>{t.status(424),t.send("<h1> 424 </h1><p> The request failed because it depended on another request and that request failed (e.g., a PROPPATCH). </p>")}),n.get("/428",(e,t)=>{t.status(428),t.send("<h1> 428 </h1><p> The origin server requires the request to be conditional. Intended to prevent the {{ lost update }} problem, where a client GETs a resource state, modifies it, and PUTs it back to the server, when meanwhile a third party has modified the state on the server, leading to a conflict. </p>")}),n.get("/429",(e,t)=>{t.status(429),t.send("<h1> 429 </h1><p> The user has sent too many requests in a given amount of time. Intended for use with rate-limiting schemes </p>")}),n.get("/431",(e,t)=>{t.status(431),t.send("<h1>  </h1><p> The server is unwilling to process the request because either an individual header field, or all the header fields collectively, are too large </p>")}),n.get("/451",(e,t)=>{t.status(451),t.send("<h1> 451 </h1><p> A server operator has received a legal demand to deny access to a resource or to a set of resources that includes the requested resource.[59] The code 451 was chosen as a reference to the novel Fahrenheit 451 (see the Acknowledgements in the RFC). </p>")}),n.get("/500",(e,t)=>{t.status(500),t.send("<h1> 500 </h1><p> A generic error message, given when an unexpected condition was encountered and no more specific message is suitable </p>")}),n.get("/501",(e,t)=>{t.status(501),t.send("<h1> 501 </h1><p> The server either does not recognize the request method, or it lacks the ability to fulfil the request. Usually this implies future availability (e.g., a new feature of a web-service API) </p>")}),n.get("/502",(e,t)=>{t.status(502),t.send("<h1> 502 </h1><p> The server was acting as a gateway or proxy and received an invalid response from the upstream server. </p>")}),n.get("/502",(e,t)=>{t.status(502),t.send("<h1> 502 </h1><p>  </p>")}),n.get("/503",(e,t)=>{t.status(503),t.send("<h1> 503 </h1><p> The server is currently unavailable (because it is overloaded or down for maintenance). Generally, this is a temporary state. </p>")}),n.get("/504",(e,t)=>{t.status(504),t.send("<h1> 504 </h1><p> The server was acting as a gateway or proxy and did not receive a timely response from the upstream server. </p>")}),n.get("/505",(e,t)=>{t.status(505),t.send("<h1> 505 </h1><p> The server does not support the HTTP protocol version used in the request. </p>")}),n.get("/507",(e,t)=>{t.status(507),t.send("<h1> 507 </h1><p> The server is unable to store the representation needed to complete the request </p>")}),n.get("/510",(e,t)=>{t.status(510),t.send("<h1> 510 </h1><p> Further extensions to the request are required for the server to fulfill it </p>")}),n.get("/103",(e,t)=>{t.status(103),t.send("<h1> 103 </h1><p> Further extensions to the request are required for the server to fulfill it </p>")}),n.get("/420",(e,t)=>{t.status(420),t.send("<h1> 420 </h1><p> A deprecated response used by the Spring Framework when a method has failed </p>")}),n.get("/526",(e,t)=>{t.status(526),t.send("<h1> 526 </h1><p> Used by Cloudflare and Cloud Foundry gorouter to indicate failure to validate the SSL/TLS certificate that the origin server presented. </p>")}),n.get("/440",(e,t)=>{t.status(440),t.send("<h1> 440 </h1><p> The client session has expired and must log in again </p>")}),n.get("/",(e,t)=>{t.status(400),t.send("<h1> Test Error Page </h1><p>  </p>")}),e.exports=n},function(e,t,s){const n=s(0);let o=function(){return class{static init(e){e.set("port",process.env.PORT||3010),e.set("view engine",n.common.viewEngine),e.set("views","C:/d/rmb/3A-T1/dist/client/prod/")}}}();e.exports=o},function(e,t,s){s(0);let n=function(){return class{static init(e){e.locals.siteTitle="r1-node page title",e.locals.userData={loggedIn:!0,name:"user one"}}}}();e.exports=n},function(e,t,s){var n=s(47);let o=function(){new WeakMap;return class{static init(e){e.use(n({secret:"keyboard cat",resave:!1,saveUninitialized:!0,cookie:{maxAge:6e4}}))}static db(){}}}();e.exports=o},function(e,t){e.exports=require("express-session")}]);